# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Add tests for bin/* python tests here
  bin-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - name: Test Run Parameters
        run: cd ./bin/test && python test_generate_run_params.py
      - name: Test Barcode Collision Detection
        run: cd ./bin/test && python test_detect_barcode_collision.py
      - name: Test split samplesheet
        run: pip install pandas && ./bin/test/test_split_sample_sheet.sh
      - name: Test create merge commands
        run: cd ./bin/test && pip install requests && ./bin/test/test_create_merge_commands.py

  # Add tests for templates/*
  unit-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # UNIT TESTS (Nothing that relies on docker - tests that can run in less than one minute)
      - name: Test demultiplex masks
        run: testPipeline/templates/demultiplex/demultiplex_test.sh
      - name: Test cellranger outputs
        run: testPipeline/templates/cellranger/cellranger_test.sh
      - name: Test upload_cellranger workflow
        run: testPipeline/templates/upload_cellranger/upload_cellranger_test.sh

  # Add tests for end-to-end workflow validation here. These will run w/ docker image
  integration-tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job

    steps:
      - uses: actions/checkout@v2
      # docker run --entrypoint /nf-fastq-plus/testPipeline/e2e/samplesheet_stats_main_test_hwg.sh -v $(pwd)/../nf-fastq-plus:/nf-fastq-plus nf-fastq-plus-playground
      - name: stats
        uses: mskcc/nf-fastq-plus@v2
        with:
          entrypoint: testPipeline/e2e/samplesheet_stats_main_test_hwg.sh
          args: -v $(pwd)/../nf-fastq-plus:/nf-fastq-plus
      # docker run --entrypoint /nf-fastq-plus/testPipeline/e2e/cellranger_demux_stats.sh -v $(pwd)/../nf-fastq-plus:/nf-fastq-plus nf-fastq-plus-playground
      - name: main
        uses: mskcc/nf-fastq-plus@v2
        with:
          entrypoint: testPipeline/e2e/cellranger_demux_stats.sh
          args: -v $(pwd)/../nf-fastq-plus:/nf-fastq-plus
